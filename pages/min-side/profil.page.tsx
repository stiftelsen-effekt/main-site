import Head from "next/head";
import { DataInfo } from "../../components/profile/details/DataInfo/DataInfo";
import style from "../../styles/Profile.module.css";
import "react-toastify/dist/ReactToastify.css";
import { useRouter } from "next/router";
import { getClient } from "../../lib/sanity.server";
import { groq } from "next-sanity";
import { PageContent } from "../../components/profile/layout/PageContent/PageContent";
import { Navbar } from "../../components/profile/layout/navbar";
import { ProfileInfo } from "../../components/profile/details/ProfileInfo/ProfileInfo";
import { footerQuery } from "../../components/shared/layout/Footer/Footer";
import { MainHeader } from "../../components/shared/layout/Header/Header";
import { widgetQuery } from "../../_queries";
import { GetStaticPropsContext, InferGetStaticPropsType } from "next";
import { LayoutType, getAppStaticProps } from "../_app.page";

const ProfilePage: React.FC<InferGetStaticPropsType<typeof getStaticProps>> = ({
  data,
  preview,
}) => {
  const router = useRouter();
  const settings = data.result.settings[0];

  if (!router.isFallback && !data) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Gi Effektivt. | Profil</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MainHeader hideOnScroll={false}>
        <Navbar logo={settings.logo} />
      </MainHeader>

      <PageContent>
        <div className={style.gridContainer}>
          <ProfileInfo />
          <DataInfo data={data.result.page} />
        </div>
      </PageContent>
    </>
  );
};

export const getStaticProps = async ({
  preview = false,
  params,
}: GetStaticPropsContext<{ slug: string[] }>) => {
  const appStaticProps = await getAppStaticProps({
    layout: LayoutType.Profile,
  });
  const result = await getClient(preview).fetch(fetchProfilePage);

  return {
    props: {
      appStaticProps,
      preview: preview,
      data: {
        result: result,
        query: fetchProfilePage,
        queryParams: {},
      },
    },
  };
};

const fetchProfilePage = groq`
{
  "settings": *[_type == "site_settings"] {
    logo,
  },
  "page": *[_type == "profile"] {
    tax,
    data
  },
  ${footerQuery}
  ${widgetQuery}
}
`;

export default ProfilePage;
